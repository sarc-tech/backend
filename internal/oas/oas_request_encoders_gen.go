// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"bytes"
	"net/http"
	"strings"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func encodeAddIncidentsRequest(
	req AddIncidentsReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *AddIncidentsApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *AddIncidentsApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "id" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "id",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.ID))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "region" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "region",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Region))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "fio" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "fio",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Fio))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "status" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "status",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Status))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "date" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "date",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Date))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeUpdateIncidentsRequest(
	req UpdateIncidentsReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *UpdateIncidentsApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *UpdateIncidentsApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "id" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "id",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.ID))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "region" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "region",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Region))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "fio" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "fio",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Fio))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "status" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "status",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Status))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "date" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "date",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Date))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}
