// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// CheckSmsParams is parameters of CheckSms operation.
type CheckSmsParams struct {
	// Phone of user.
	Phone string
	// Sms.
	SMS string
}

func unpackCheckSmsParams(packed middleware.Parameters) (params CheckSmsParams) {
	{
		key := middleware.ParameterKey{
			Name: "phone",
			In:   "query",
		}
		params.Phone = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "sms",
			In:   "query",
		}
		params.SMS = packed[key].(string)
	}
	return params
}

func decodeCheckSmsParams(args [0]string, argsEscaped bool, r *http.Request) (params CheckSmsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: phone.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "phone",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Phone = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "phone",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sms.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sms",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SMS = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sms",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteIncidentParams is parameters of deleteIncident operation.
type DeleteIncidentParams struct {
	// Request id to delete.
	IncidentId string
}

func unpackDeleteIncidentParams(packed middleware.Parameters) (params DeleteIncidentParams) {
	{
		key := middleware.ParameterKey{
			Name: "incidentId",
			In:   "path",
		}
		params.IncidentId = packed[key].(string)
	}
	return params
}

func decodeDeleteIncidentParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteIncidentParams, _ error) {
	// Decode path: incidentId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "incidentId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.IncidentId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "incidentId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteStatusParams is parameters of deleteStatus operation.
type DeleteStatusParams struct {
	// Request id to delete.
	StatusId string
}

func unpackDeleteStatusParams(packed middleware.Parameters) (params DeleteStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "statusId",
			In:   "path",
		}
		params.StatusId = packed[key].(string)
	}
	return params
}

func decodeDeleteStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteStatusParams, _ error) {
	// Decode path: statusId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "statusId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StatusId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "statusId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetIncidentByIdParams is parameters of getIncidentById operation.
type GetIncidentByIdParams struct {
	// ID of Incidents to return.
	IncidentId string
}

func unpackGetIncidentByIdParams(packed middleware.Parameters) (params GetIncidentByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "incidentId",
			In:   "path",
		}
		params.IncidentId = packed[key].(string)
	}
	return params
}

func decodeGetIncidentByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetIncidentByIdParams, _ error) {
	// Decode path: incidentId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "incidentId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.IncidentId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "incidentId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetStatusByIdParams is parameters of getStatusById operation.
type GetStatusByIdParams struct {
	// ID of Status to return.
	StatusId string
}

func unpackGetStatusByIdParams(packed middleware.Parameters) (params GetStatusByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "statusId",
			In:   "path",
		}
		params.StatusId = packed[key].(string)
	}
	return params
}

func decodeGetStatusByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetStatusByIdParams, _ error) {
	// Decode path: statusId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "statusId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StatusId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "statusId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SendSmsParams is parameters of SendSms operation.
type SendSmsParams struct {
	// Phone of user.
	Phone string
}

func unpackSendSmsParams(packed middleware.Parameters) (params SendSmsParams) {
	{
		key := middleware.ParameterKey{
			Name: "phone",
			In:   "path",
		}
		params.Phone = packed[key].(string)
	}
	return params
}

func decodeSendSmsParams(args [1]string, argsEscaped bool, r *http.Request) (params SendSmsParams, _ error) {
	// Decode path: phone.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "phone",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Phone = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "phone",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
